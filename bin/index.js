#! /usr/bin/env node
const fs = require('fs')
const chalk = require('chalk')
const boxen = require('boxen')
const yargs = require('yargs');
const Table = require('cli-table3');
const  clear = require('clear');

clear();

const usage = chalk.keyword('violet')(
  "\nUsage: npm audit --json | nvr -p <project> \n"
  + boxen(
    chalk.green(
      "\n" + "Generate vulnerability report from a npm project\nbased on npm audit json reponse" + "\n"
    ),
    { padding: 1, borderColor: 'green', dimBorder: true },
  ) + "\n"
);

const options = yargs
  .usage(usage)
  .option("p", {
    alias: "project",
    describe: "Name of the analised project used in the report",
    type: "string",
    demandOption: false,
  })
  .option("d", {
    alias: "debug",
    describe: "Allow console log for debugging",
    type: "boolean",
    demandOption: false,
  })
  .help(true)
  .argv;

const npmAuditJson = JSON.parse(fs.readFileSync(0).toString("utf-8"));

if (options.project == null || !npmAuditJson) {
  yargs.showHelp();
  return;
}
const shouldLog = options.debug;

const {
  metadata,
  vulnerabilities,
} = npmAuditJson;

if (shouldLog) console.log(metadata);
if (shouldLog) console.log(vulnerabilities);

const data = Object.values(vulnerabilities)
.filter((i) => 'critical' === i.severity.toLowerCase())
.reduce((res, i) => {
  if (res[i.name]) {
    res[i.name] = res[i.name].concat((i.via || []).map((t) => t.title || '').filter((e) => !!e));
  } else {
    res[i.name] = (i.via || []).map((t) => t.title || '').filter((e) => !!e);
  }
  return res;
}, {})
if (shouldLog) console.log(data);

const vulnerabilitiesTable = new Table({ head: ['Package', 'Vulnerability'] });

Object.entries(data).forEach(([package, descriptions]) => {
  const uniqueDescriptions = descriptions
    .filter((value, index, array) => array.indexOf(value) === index)
  for (let i = 0; i < uniqueDescriptions.length; i += 1) {
    vulnerabilitiesTable.push([package, uniqueDescriptions[i]]);
  }
});

const overviewTable = new Table({ head: ['Dependencies', 'Critical', 'Critical %'] });
overviewTable.push([
  metadata.dependencies.prod,
  metadata.vulnerabilities.critical,
  metadata.vulnerabilities.info / metadata.dependencies.total
]);

const output = chalk.green(` ${options.project}`.toUpperCase())
  + '\n'
  + vulnerabilitiesTable.toString()
  + '\n'
  + overviewTable.toString()
  + '\n'

fs.writeFileSync(1, output);
